// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRIANGULARMESH_FBSDATA_H_
#define FLATBUFFERS_GENERATED_TRIANGULARMESH_FBSDATA_H_

#include "flatbuffers/flatbuffers.h"

#include "matrix_generated.h"

namespace fbsdata {

struct TriangularMesh;

struct TriangularMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_VERTICES = 6,
    VT_FACES = 8,
    VT_TEXCOORD = 10,
    VT_TEXFACES = 12,
    VT_NORMAL_VERTICES = 14,
    VT_NORMAL_FACES = 16,
    VT_TRANSMAT = 18,
    VT_TEXTURE_IMAGE = 20
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Matrix_d *vertices() const {
    return GetPointer<const Matrix_d *>(VT_VERTICES);
  }
  const Matrix_i32 *faces() const {
    return GetPointer<const Matrix_i32 *>(VT_FACES);
  }
  const Matrix_d *texcoord() const {
    return GetPointer<const Matrix_d *>(VT_TEXCOORD);
  }
  const Matrix_i32 *texfaces() const {
    return GetPointer<const Matrix_i32 *>(VT_TEXFACES);
  }
  const Matrix_d *normal_vertices() const {
    return GetPointer<const Matrix_d *>(VT_NORMAL_VERTICES);
  }
  const Matrix_i32 *normal_faces() const {
    return GetPointer<const Matrix_i32 *>(VT_NORMAL_FACES);
  }
  const Matrix_d *transmat() const {
    return GetPointer<const Matrix_d *>(VT_TRANSMAT);
  }
  const Matrix_u8 *texture_image() const {
    return GetPointer<const Matrix_u8 *>(VT_TEXTURE_IMAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyTable(vertices()) &&
           VerifyOffset(verifier, VT_FACES) &&
           verifier.VerifyTable(faces()) &&
           VerifyOffset(verifier, VT_TEXCOORD) &&
           verifier.VerifyTable(texcoord()) &&
           VerifyOffset(verifier, VT_TEXFACES) &&
           verifier.VerifyTable(texfaces()) &&
           VerifyOffset(verifier, VT_NORMAL_VERTICES) &&
           verifier.VerifyTable(normal_vertices()) &&
           VerifyOffset(verifier, VT_NORMAL_FACES) &&
           verifier.VerifyTable(normal_faces()) &&
           VerifyOffset(verifier, VT_TRANSMAT) &&
           verifier.VerifyTable(transmat()) &&
           VerifyOffset(verifier, VT_TEXTURE_IMAGE) &&
           verifier.VerifyTable(texture_image()) &&
           verifier.EndTable();
  }
};

struct TriangularMeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TriangularMesh::VT_NAME, name);
  }
  void add_vertices(flatbuffers::Offset<Matrix_d> vertices) {
    fbb_.AddOffset(TriangularMesh::VT_VERTICES, vertices);
  }
  void add_faces(flatbuffers::Offset<Matrix_i32> faces) {
    fbb_.AddOffset(TriangularMesh::VT_FACES, faces);
  }
  void add_texcoord(flatbuffers::Offset<Matrix_d> texcoord) {
    fbb_.AddOffset(TriangularMesh::VT_TEXCOORD, texcoord);
  }
  void add_texfaces(flatbuffers::Offset<Matrix_i32> texfaces) {
    fbb_.AddOffset(TriangularMesh::VT_TEXFACES, texfaces);
  }
  void add_normal_vertices(flatbuffers::Offset<Matrix_d> normal_vertices) {
    fbb_.AddOffset(TriangularMesh::VT_NORMAL_VERTICES, normal_vertices);
  }
  void add_normal_faces(flatbuffers::Offset<Matrix_i32> normal_faces) {
    fbb_.AddOffset(TriangularMesh::VT_NORMAL_FACES, normal_faces);
  }
  void add_transmat(flatbuffers::Offset<Matrix_d> transmat) {
    fbb_.AddOffset(TriangularMesh::VT_TRANSMAT, transmat);
  }
  void add_texture_image(flatbuffers::Offset<Matrix_u8> texture_image) {
    fbb_.AddOffset(TriangularMesh::VT_TEXTURE_IMAGE, texture_image);
  }
  explicit TriangularMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TriangularMeshBuilder &operator=(const TriangularMeshBuilder &);
  flatbuffers::Offset<TriangularMesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TriangularMesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<TriangularMesh> CreateTriangularMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<Matrix_d> vertices = 0,
    flatbuffers::Offset<Matrix_i32> faces = 0,
    flatbuffers::Offset<Matrix_d> texcoord = 0,
    flatbuffers::Offset<Matrix_i32> texfaces = 0,
    flatbuffers::Offset<Matrix_d> normal_vertices = 0,
    flatbuffers::Offset<Matrix_i32> normal_faces = 0,
    flatbuffers::Offset<Matrix_d> transmat = 0,
    flatbuffers::Offset<Matrix_u8> texture_image = 0) {
  TriangularMeshBuilder builder_(_fbb);
  builder_.add_texture_image(texture_image);
  builder_.add_transmat(transmat);
  builder_.add_normal_faces(normal_faces);
  builder_.add_normal_vertices(normal_vertices);
  builder_.add_texfaces(texfaces);
  builder_.add_texcoord(texcoord);
  builder_.add_faces(faces);
  builder_.add_vertices(vertices);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<TriangularMesh> CreateTriangularMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<Matrix_d> vertices = 0,
    flatbuffers::Offset<Matrix_i32> faces = 0,
    flatbuffers::Offset<Matrix_d> texcoord = 0,
    flatbuffers::Offset<Matrix_i32> texfaces = 0,
    flatbuffers::Offset<Matrix_d> normal_vertices = 0,
    flatbuffers::Offset<Matrix_i32> normal_faces = 0,
    flatbuffers::Offset<Matrix_d> transmat = 0,
    flatbuffers::Offset<Matrix_u8> texture_image = 0) {
  return fbsdata::CreateTriangularMesh(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      vertices,
      faces,
      texcoord,
      texfaces,
      normal_vertices,
      normal_faces,
      transmat,
      texture_image);
}

inline const fbsdata::TriangularMesh *GetTriangularMesh(const void *buf) {
  return flatbuffers::GetRoot<fbsdata::TriangularMesh>(buf);
}

inline const fbsdata::TriangularMesh *GetSizePrefixedTriangularMesh(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbsdata::TriangularMesh>(buf);
}

inline bool VerifyTriangularMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbsdata::TriangularMesh>(nullptr);
}

inline bool VerifySizePrefixedTriangularMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbsdata::TriangularMesh>(nullptr);
}

inline void FinishTriangularMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbsdata::TriangularMesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTriangularMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbsdata::TriangularMesh> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbsdata

#endif  // FLATBUFFERS_GENERATED_TRIANGULARMESH_FBSDATA_H_
